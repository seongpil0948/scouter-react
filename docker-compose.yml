version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: telemetry-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telemetry
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka와 Zookeeper 서비스 제거 (외부 Kafka 서버 사용)

  telemetry-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telemetry-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telemetry
      POSTGRES_MAX_CONNECTIONS: 20
      KAFKA_BROKERS: 10.101.91.181:9092,10.101.91.181:9093
      KAFKA_GROUP_ID: telemetry-processor-group
      KAFKA_CLIENT_ID: telemetry-processor
      BATCH_SIZE: 100
      FLUSH_INTERVAL: 5000
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telemetry-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: telemetry
      POSTGRES_SSL: false
    depends_on:
      - postgres
      - telemetry-backend

volumes:
  postgres-data:
    driver: local