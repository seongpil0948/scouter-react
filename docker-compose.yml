services:
  # 프론트엔드 Next.js 애플리케이션
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=telemetry
      - POSTGRES_PORT=5432
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - telemetry-network

  # 텔레메트리 백엔드 애플리케이션 (Kafka 리스너)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=telemetry
      - POSTGRES_PORT=5432
      - KAFKA_TRACE_TOPIC=onpremise.theshop.oltp.dev.trace
      - KAFKA_LOG_TOPIC=onpremise.theshop.oltp.dev.log
      - BATCH_SIZE=100
      - FLUSH_INTERVAL=5000
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - telemetry-network

  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=telemetry
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # 초기화 스크립트 마운트
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - telemetry-network

volumes:
  postgres-data:

networks:
  telemetry-network:
    driver: bridge
